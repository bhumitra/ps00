;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |32|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")))))
(define-struct point (x y))

;; sum-of-distance-from-origin : ListOfPoint -> PosReal
;; GIVEN: a function that takes a list of Points 
;; RETURNS: the sum of all distances of those Points from (0,0). 

;You should write a helper function to calculate the distance. 
;For simplicity, you can use the Manhattan distance measure (distance = x + y).

;; Examples:
;;  (sum-of-distance-from-origin empty) => 0
;;  (sum-of-distance-from-origin (list (make-point 2 0))) => 2
;;  (sum-of-distance-from-origin (list (make-point 3 0)
;;                                     (make-point 0 3)
;;                                     (make-point 3 4))) => 13

(define (sum-of-distance-from-origin lop)
  (cond [(empty? lop) 0]
        [else (+ 
               (+ 
                (point-x (first lop)) 
                (point-y (first lop)))
               (sum-of-distance-from-origin (rest lop)))]))

;tests
(check-expect (sum-of-distance-from-origin empty) 0)

(check-expect (sum-of-distance-from-origin (list (make-point 2 0))) 2)

(check-expect (sum-of-distance-from-origin (list (make-point 3 0)
                                             (make-point 0 3)
                                             (make-point 3 4))) 13)